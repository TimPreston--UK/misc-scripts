#!/usr/bin/perl

use strict;
use Config::Auto;
use DateTime::Format::DateParse;
use Net::Google::Calendar;
use Net::Netrc;
use WebService::NotifyMyAndroid;
use WWW::Mechanize;

my $conf = Config::Auto::parse;

my @required_conf_options = qw(nma_key house_num postcode);
if (!$conf || grep { !exists $conf->{$_} } @required_conf_options) {
    die "Must provide a conf file (see Config::Auto) with options: "
        . join ', ', @required_conf_options;
}

my $mach = Net::Netrc->lookup('calendar.google.com')
    or die "No login details for calendar.google.com in ~/.netrc";
my ($user, $pass) = $mach->lpa;

my $gcal = Net::Google::Calendar->new;
say "Logging in to Google Calendar as $user";
$gcal->login($user, $pass)
    or die "Google Calendar login failed";

# Find the calendar we wnt
my ($desired_calendar) = grep {
    $_->title eq 'Rubbish collections'
} $gcal->get_calendars;
if ($desired_calendar) {
    $gcal->set_calendar($desired_calendar);
} else {
    die "Desired calendar not found";
}

my $mech = WWW::Mechanize->new;

$mech->get('http://www.stevenage.gov.uk/find/');

$mech->submit_form(
    with_fields => {
        # What the fuck kind of field names are these?  Fucking ASP.net
        # bollocks.
        'ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$txtNumber' => 5,
        'ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$txtPostcode' => 'SG2 7DP',
    },
    button => 'ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$BtnLookup',
);

if (my ($date, $type) = $mech->content =~ 
    m{Your next rubbish collection is on <strong>(.+) \((.+)\)</strong>}m)
{
    say "Next $type collection $date - looking for calendar reminder";

    # Look for an existing calendar event; if not found, create one.
    # Note: start-min is inclusive, start-max exclusive - hence 
    # adding a second
    my $collection_dt = DateTime::Format::DateParse->parse_datetime($date);
    my $reminder_start_dt = $collection_dt->clone->subtract(days => 1);
    $reminder_start_dt->set(hour =>20, minute => 0, second => 0);
    my $reminder_end_dt = $reminder_start_dt->clone->add( minutes => 10 );
    say "Event reminder DT $reminder_start_dt";
    my ($event) = $gcal->get_events(
        'q' => 'collection tomorrow',
        'start-min' => $reminder_start_dt,
        'start-max' => $reminder_end_dt->clone->add(seconds => 1),
    );
    if (!$event) {
        say "Creating reminder";
        my $entry = Net::Google::Calendar::Entry->new;
        $entry->title("$type out for collection tomorrow");
        $entry->when($reminder_start_dt, $reminder_end_dt);
        #$event->content("$type collection on $date");
        $entry->reminder('alert', 'hours', 1);
        $entry->reminder('alert', 'minutes', 10);
        $gcal->add_entry($entry)
            or die "Failed to add calendar entry";
    } else {
        say "Event already on calendar";
    }
} else {
    die "Failed to identify next collection in response";
}
